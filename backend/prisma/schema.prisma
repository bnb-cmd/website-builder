// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // extensions = [vector] // Temporarily disabled for local testing
}

// User Management
model User {
  id       String     @id @default(cuid())
  email    String     @unique
  name     String
  password String
  phone    String?
  avatar   String?
  role     UserRole   @default(USER)
  status   UserStatus @default(ACTIVE)

  // Business Information
  businessType BusinessType?
  city         String?
  companyName  String?

  // Subscription
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  websites                Website[]
  teams                   TeamMember[]
  ownedTeams              Team[]
  payments                Payment[]
  aiGenerations           AIGeneration[]
  notifications           Notification[]
  notificationPreferences NotificationPreferences?
  notificationDigests     NotificationDigest[]
  sessions                UserSession[]
  domains                 Domain[]
  mediaAssets             MediaAsset[]
  videoProjects           VideoProject[]
  designSystems           DesignSystem[]
  agency                  Agency?
  aiSessions              AISession[]
  arvrContent             ARVRContent[]

  // Blockchain & Web3
  blockchainWallets BlockchainWallet[]
  nftCollections    NFTCollection[]
  smartContracts    SmartContract[]
  web3Integrations  Web3Integration[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner    User         @relation(fields: [ownerId], references: [id])
  members  TeamMember[]
  websites Website[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

// Website Management
model Website {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      WebsiteStatus @default(DRAFT)

  // Content
  content   Json? // Main website content
  settings  Json? // Website settings
  customCSS String? // Custom CSS
  customJS  String? // Custom JavaScript

  // Domain
  subdomain    String? @unique
  customDomain String? @unique

  // Template
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])

  // Business
  businessType BusinessType?
  language     Language      @default(ENGLISH)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  // Analytics
  analyticsId String?

  // Ownership
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  pages         Page[]
  products      Product[]
  orders        Order[]
  visitors      WebsiteVisitor[]
  aiGenerations AIGeneration[]
  domains       Domain[]
  pwaSettings   PwaSettings?
  analytics     WebsiteAnalytics[]
  campaigns     MarketingCampaign[]
  integrations  WebsiteIntegration[]
  mediaAssets   MediaAsset[]
  videoProjects VideoProject[]
  designSystems DesignSystem[]
  agencyClients AgencyClient[]
  aiSessions    AISession[]

  // Blockchain & Web3
  blockchainWallets BlockchainWallet[]
  nftCollections    NFTCollection[]
  smartContracts    SmartContract[]
  web3Integrations  Web3Integration[]
  ARVRContent       ARVRContent[]

  @@map("websites")
}

model PwaSettings {
  id              String  @id @default(cuid())
  websiteId       String  @unique
  name            String
  shortName       String
  description     String?
  themeColor      String  @default("#ffffff")
  backgroundColor String  @default("#ffffff")
  display         String  @default("standalone") // standalone, fullscreen, minimal-ui
  orientation     String  @default("portrait") // portrait, landscape
  scope           String  @default("/")
  startUrl        String  @default("/")
  icon512         String? // URL to 512x512 icon
  icon192         String? // URL to 192x192 icon

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("pwa_settings")
}

model WebsiteAnalytics {
  id        String @id @default(cuid())
  websiteId String

  // Metrics
  pageViews          Int   @default(0)
  uniqueVisitors     Int   @default(0)
  bounceRate         Float @default(0)
  avgSessionDuration Float @default(0) // in seconds
  conversionRate     Float @default(0)

  // Revenue metrics
  revenue       Decimal @default(0)
  orders        Int     @default(0)
  avgOrderValue Decimal @default(0)

  // Traffic sources
  organicTraffic  Int @default(0)
  socialTraffic   Int @default(0)
  directTraffic   Int @default(0)
  referralTraffic Int @default(0)

  // Device breakdown
  mobileTraffic  Int @default(0)
  desktopTraffic Int @default(0)
  tabletTraffic  Int @default(0)

  // Geographic data
  topCountries Json // {country: count}
  topCities    Json // {city: count}

  // Performance metrics
  pageLoadTime  Float @default(0) // in seconds
  coreWebVitals Json // LCP, FID, CLS scores

  // Date range
  date   DateTime
  period AnalyticsPeriod

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, date, period])
  @@map("website_analytics")
}

model MarketingCampaign {
  id        String         @id @default(cuid())
  websiteId String
  name      String
  type      CampaignType
  status    CampaignStatus @default(DRAFT)

  // Campaign settings
  channels       CampaignChannel[]
  targetAudience Json? // Target audience criteria
  schedule       Json? // Scheduling rules

  // Content
  message   String
  mediaUrls String[] // Images, videos, etc.

  // Performance metrics
  sentCount      Int @default(0)
  deliveredCount Int @default(0)
  openedCount    Int @default(0)
  clickedCount   Int @default(0)
  convertedCount Int @default(0)

  // Automation rules
  triggers   Json? // Trigger conditions
  conditions Json? // Conditional logic

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website  Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  messages CampaignMessage[]

  @@map("marketing_campaigns")
}

model CampaignMessage {
  id          String  @id @default(cuid())
  campaignId  String
  recipientId String? // User ID or phone/email

  // Message details
  channel   CampaignChannel
  content   String
  mediaUrls String[]

  // Status
  status      MessageStatus @default(PENDING)
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?

  // Response
  response String?
  error    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_messages")
}

model Integration {
  id          String              @id @default(cuid())
  name        String
  description String?
  category    IntegrationCategory
  provider    String // e.g., "Google", "Facebook", "Stripe"

  // Integration details
  iconUrl          String?
  websiteUrl       String?
  apiVersion       String?
  documentationUrl String?

  // Configuration
  configSchema Json? // JSON schema for configuration
  authType     AuthType @default(API_KEY)

  // Status
  status    IntegrationStatus @default(ACTIVE)
  isPremium Boolean           @default(false)

  // Pricing
  price    Decimal?
  currency String   @default("PKR")

  // Features
  features String[]
  tags     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  websiteIntegrations WebsiteIntegration[]

  @@map("integrations")
}

model WebsiteIntegration {
  id            String @id @default(cuid())
  websiteId     String
  integrationId String

  // Configuration
  config      Json // Integration-specific configuration
  credentials Json // Encrypted credentials

  // Status
  status    IntegrationStatus @default(ACTIVE)
  isEnabled Boolean           @default(true)

  // Usage tracking
  lastUsedAt DateTime?
  usageCount Int       @default(0)

  // Error tracking
  lastError  String?
  errorCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website     Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([websiteId, integrationId])
  @@map("website_integrations")
}

model MediaAsset {
  id        String  @id @default(cuid())
  websiteId String
  userId    String?

  // Asset details
  name         String
  type         MediaType
  url          String
  thumbnailUrl String?

  // File information
  size     Int // in bytes
  duration Float? // for videos/audio, in seconds
  width    Int? // for images/videos
  height   Int? // for images/videos

  // Metadata
  metadata Json? // EXIF data, codec info, etc.
  tags     String[]

  // AI processing
  aiGenerated Boolean @default(false)
  aiPrompt    String?

  // Status
  status AssetStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website    Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  videoClips VideoClip[]

  @@map("media_assets")
}

model VideoProject {
  id        String  @id @default(cuid())
  websiteId String
  userId    String?

  // Project details
  name        String
  description String?

  // Video settings
  resolution String @default("1920x1080")
  frameRate  Int    @default(30)
  duration   Float  @default(0) // in seconds

  // Timeline data
  timeline Json // Video timeline with clips, effects, etc.

  // Export settings
  exportSettings Json?

  // Status
  status ProjectStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  clips   VideoClip[]

  @@map("video_projects")
}

model VideoClip {
  id        String  @id @default(cuid())
  projectId String
  assetId   String?

  // Clip details
  name      String
  startTime Float  @default(0) // in seconds
  endTime   Float  @default(0) // in seconds
  position  Float  @default(0) // position in timeline

  // Effects and filters
  effects Json? // Applied effects
  filters Json? // Applied filters

  // Transform
  transform Json? // Position, scale, rotation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  asset   MediaAsset?  @relation(fields: [assetId], references: [id], onDelete: SetNull)

  @@map("video_clips")
}

model DesignSystem {
  id        String  @id @default(cuid())
  websiteId String
  userId    String?

  // Design system details
  name        String
  description String?

  // Brand identity
  brandName        String?
  brandValues      String[] // Array of brand values
  brandPersonality String? // e.g., "modern", "traditional", "luxury"

  // Color palette
  primaryColors   Json // {name: string, hex: string, usage: string}[]
  secondaryColors Json // {name: string, hex: string, usage: string}[]
  neutralColors   Json // {name: string, hex: string, usage: string}[]

  // Typography
  fontFamilies Json // {name: string, url: string, weights: number[], usage: string}[]
  fontSizes    Json // {name: string, size: number, lineHeight: number, usage: string}[]

  // Spacing & Layout
  spacingScale Json // {name: string, value: number, usage: string}[]
  borderRadius Json // {name: string, value: number, usage: string}[]
  shadows      Json // {name: string, value: string, usage: string}[]

  // Components
  components Json // Component library definitions

  // AI generation data
  aiGenerated        Boolean @default(false)
  aiPrompt           String?
  generationSettings Json? // Settings used for AI generation

  // Status
  status DesignSystemStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("design_systems")
}

model Agency {
  id     String @id @default(cuid())
  userId String @unique // Agency owner

  // Agency details
  name        String
  description String?
  website     String?
  logo        String?

  // White-label settings
  brandName    String?
  brandColors  Json? // Primary and secondary colors
  customDomain String?
  customLogo   String?

  // Features enabled
  features Json // Which features are enabled for this agency

  // Billing
  plan         AgencyPlan @default(STARTER)
  billingEmail String?

  // Status
  status AgencyStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients AgencyClient[]

  @@map("agencies")
}

model AgencyClient {
  id        String @id @default(cuid())
  agencyId  String
  websiteId String

  // Client details
  clientName  String
  clientEmail String
  clientPhone String?
  companyName String?

  // Project details
  projectType String?
  budget      Decimal?
  timeline    String?

  // Status
  status ClientStatus @default(ACTIVE)

  // Communication
  lastContactAt DateTime?
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agency  Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([agencyId, websiteId])
  @@map("agency_clients")
}

model AISession {
  id        String  @id @default(cuid())
  websiteId String
  userId    String?

  // Session details
  sessionId String        @unique
  type      AISessionType

  // Context
  context Json // Conversation context, user preferences, etc.
  history Json // Chat history, interactions

  // AI Configuration
  model       String @default("gpt-4")
  temperature Float  @default(0.7)
  maxTokens   Int    @default(2000)

  // Status
  status AISessionStatus @default(ACTIVE)

  // Analytics
  messageCount Int     @default(0)
  tokenUsage   Int     @default(0)
  cost         Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("ai_sessions")
}

model ARVRContent {
  id        String  @id @default(cuid())
  websiteId String
  userId    String?

  // Content details
  name        String
  type        ARVRType
  description String?

  // 3D Assets
  modelUrl     String? // URL to 3D model file
  textureUrl   String? // URL to texture files
  animationUrl String? // URL to animation files

  // AR/VR Settings
  scale    Json? // {x, y, z} scale values
  position Json? // {x, y, z} position values
  rotation Json? // {x, y, z} rotation values

  // Interaction
  interactions Json? // Touch, click, gesture handlers

  // Performance
  polygonCount Int?
  textureSize  Int?
  fileSize     Int?

  // Status
  status ARVRStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("arvr_content")
}

model Page {
  id        String  @id @default(cuid())
  websiteId String
  name      String
  slug      String
  content   Json
  settings  Json?
  isHome    Boolean @default(false)
  order     Int     @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, slug])
  @@map("pages")
}

// Template Management
model Template {
  id           String           @id @default(cuid())
  name         String
  description  String?
  category     TemplateCategory
  businessType BusinessType?
  language     Language         @default(ENGLISH)

  // Template Data
  content Json // Template structure
  styles  Json // Template styles
  assets  String[] // Asset URLs

  // Preview
  previewImage String?
  thumbnail    String?

  // Pricing
  isPremium Boolean  @default(false)
  price     Decimal?

  // Status
  status TemplateStatus @default(ACTIVE)

  // Metadata
  tags       String[]
  features   String[]
  responsive Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  websites Website[]

  @@map("templates")
}

// E-commerce
model Product {
  id           String   @id @default(cuid())
  websiteId    String
  name         String
  description  String?
  price        Decimal
  comparePrice Decimal?
  sku          String?

  // Inventory
  trackInventory    Boolean @default(false)
  inventory         Int     @default(0)
  lowStockThreshold Int     @default(5)

  // Media
  images String[]
  videos String[]

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  // Status
  status ProductStatus @default(ACTIVE)

  // Variants
  hasVariants Boolean @default(false)
  variants    Json?

  // Shipping
  weight     Decimal?
  dimensions Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website    Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          String @id @default(cuid())
  websiteId   String
  orderNumber String @unique

  // Customer Information
  customerEmail String
  customerName  String?
  customerPhone String?

  // Address
  shippingAddress Json
  billingAddress  Json?

  // Order Details
  subtotal Decimal
  tax      Decimal @default(0)
  shipping Decimal @default(0)
  discount Decimal @default(0)
  total    Decimal

  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?

  // Shipping
  shippingStatus ShippingStatus @default(PENDING)
  trackingNumber String?

  // Notes
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String

  quantity Int
  price    Decimal

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// AI Services
model AIGeneration {
  id        String  @id @default(cuid())
  userId    String?
  websiteId String?

  // Generation Details
  type     AIGenerationType
  prompt   String
  response String
  model    String

  // Metadata
  tokens   Int?
  cost     Decimal?
  language Language?

  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  website Website? @relation(fields: [websiteId], references: [id])

  @@map("ai_generations")
}

// Subscription Management
model Subscription {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Pricing
  price    Decimal
  currency String               @default("PKR")
  interval SubscriptionInterval

  // Features
  maxWebsites     Int
  maxPages        Int?
  maxProducts     Int?
  maxStorage      Int? // in MB
  customDomain    Boolean @default(false)
  aiGenerations   Int?
  prioritySupport Boolean @default(false)

  // Status
  status SubscriptionStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users   User[]
  Payment Payment[]

  @@map("subscriptions")
}

model Payment {
  id             String  @id @default(cuid())
  userId         String
  subscriptionId String?

  // Payment Details
  amount   Decimal
  currency String        @default("PKR")
  status   PaymentStatus @default(PENDING)

  // Gateway Information
  gateway     PaymentGateway
  gatewayId   String?
  gatewayData Json?

  // Subscription
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

// Analytics
model WebsiteVisitor {
  id        String @id @default(cuid())
  websiteId String

  // Visitor Information
  ipAddress String?
  userAgent String?
  country   String?
  city      String?
  referrer  String?

  // Page Information
  page      String?
  sessionId String?

  createdAt DateTime @default(now())

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("website_visitors")
}

// Notifications
model Notification {
  id      String           @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String
  data    Json?

  // Enhanced fields
  channel  NotificationChannel  @default(IN_APP)
  status   NotificationStatus   @default(PENDING)
  priority NotificationPriority @default(NORMAL)

  // Interactive features
  actions  Json? // Action buttons data
  imageUrl String?

  // Tracking
  read      Boolean   @default(false)
  readAt    DateTime?
  clickedAt DateTime?

  // Scheduling
  scheduledFor DateTime?
  expiresAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics NotificationAnalytics[]

  @@map("notifications")
}

model NotificationPreferences {
  id     String @id @default(cuid())
  userId String @unique

  // Channel preferences
  emailEnabled    Boolean @default(true)
  pushEnabled     Boolean @default(true)
  smsEnabled      Boolean @default(false)
  whatsappEnabled Boolean @default(false)

  // Type preferences
  enabledTypes NotificationType[]

  // Timing preferences
  quietHoursStart String? // HH:MM format
  quietHoursEnd   String? // HH:MM format
  timezone        String  @default("Asia/Karachi")

  // Frequency
  digestFrequency String @default("DAILY") // INSTANT, DAILY, WEEKLY

  // Language
  language String @default("en")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model NotificationTemplate {
  id String @id @default(cuid())

  // Template identification
  type     NotificationType
  channel  NotificationChannel
  language String              @default("en")

  // Template content
  title   String
  message String
  subject String? // For email

  // Template variables
  variables Json? // Available template variables

  // Styling
  imageUrl String?
  color    String?

  // Status
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, channel, language])
  @@map("notification_templates")
}

model NotificationAnalytics {
  id             String @id @default(cuid())
  notificationId String

  // Delivery tracking
  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?
  clickedAt   DateTime?

  // Channel-specific data
  channelData Json? // Channel-specific analytics

  // Performance metrics
  deliveryTime Int? // Milliseconds
  openRate     Float?
  clickRate    Float?

  createdAt DateTime @default(now())

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("notification_analytics")
}

model NotificationDigest {
  id     String @id @default(cuid())
  userId String

  // Digest content
  title   String
  content Json // Array of notification summaries

  // Delivery
  channel NotificationChannel @default(EMAIL)
  status  NotificationStatus  @default(PENDING)

  // Timing
  period String // DAILY, WEEKLY
  sentAt DateTime?

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_digests")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum WebsiteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TemplateCategory {
  BUSINESS
  PORTFOLIO
  ECOMMERCE
  BLOG
  RESTAURANT
  HEALTHCARE
  EDUCATION
  REAL_ESTATE
  TECHNOLOGY
  CREATIVE
}

enum TemplateStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum BusinessType {
  RESTAURANT
  RETAIL
  SERVICE
  ECOMMERCE
  EDUCATION
  HEALTHCARE
  REAL_ESTATE
  TECHNOLOGY
  CREATIVE
  NON_PROFIT
  OTHER
}

enum Language {
  ENGLISH
  URDU
  PUNJABI
  SINDHI
  PASHTO
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentGateway {
  STRIPE
  JAZZCASH
  EASYPAISA
  BANK_TRANSFER
}

enum AIGenerationType {
  CONTENT
  IMAGE
  SEO
  COLORS
  TEMPLATE_SUGGESTION
  PRODUCT_DESCRIPTION
  META_TAGS
}

enum SubscriptionInterval {
  MONTHLY
  YEARLY
  LIFETIME
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  PAYMENT
  SUBSCRIPTION
  WEBSITE
  TEAM
  ORDER_STATUS
  INVENTORY_LOW
  DOMAIN_EXPIRY
  AI_GENERATION_COMPLETE
  COLLABORATION_INVITE
  SECURITY_ALERT
  PERFORMANCE_ISSUE
  BACKUP_COMPLETE
  INTEGRATION_ERROR
  CAMPAIGN_RESULTS
  ANALYTICS_INSIGHT
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  WHATSAPP
  PUSH
  WEBHOOK
  SLACK
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Domain Management
model Domain {
  id                String       @id @default(cuid())
  userId            String
  domain            String       @unique
  websiteId         String?
  status            DomainStatus @default(pending)
  autoRenew         Boolean      @default(true)
  privacyProtection Boolean      @default(true)
  pricing           Json // Domain pricing information
  registrationDate  DateTime?
  expiryDate        DateTime?
  transferAuthCode  String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  website    Website?    @relation(fields: [websiteId], references: [id], onDelete: SetNull)
  dnsRecords DNSRecord[]

  @@map("domains")
}

model DNSRecord {
  id        String        @id @default(cuid())
  domainId  String
  type      DNSRecordType
  name      String
  value     String
  ttl       Int           @default(3600)
  priority  Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("dns_records")
}

enum DomainStatus {
  pending
  active
  expired
  transferring
  suspended
}

enum AnalyticsPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum CampaignType {
  EMAIL
  SMS
  WHATSAPP
  PUSH_NOTIFICATION
  SOCIAL_MEDIA
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
  FACEBOOK
  INSTAGRAM
  TWITTER
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  FAILED
  BOUNCED
}

enum IntegrationCategory {
  ANALYTICS
  PAYMENT
  EMAIL
  SOCIAL_MEDIA
  CRM
  ECOMMERCE
  MARKETING
  CUSTOMER_SUPPORT
  PRODUCTIVITY
  OTHER
}

enum AuthType {
  API_KEY
  OAUTH2
  BASIC_AUTH
  WEBHOOK
  NO_AUTH
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  BETA
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  GIF
  SVG
  PDF
}

enum AssetStatus {
  ACTIVE
  PROCESSING
  ERROR
  DELETED
}

enum ProjectStatus {
  DRAFT
  PROCESSING
  COMPLETED
  EXPORTED
  FAILED
}

enum DesignSystemStatus {
  DRAFT
  GENERATING
  COMPLETED
  APPLIED
  ARCHIVED
}

enum AgencyPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum AgencyStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum AISessionType {
  CHAT
  CODE_GENERATION
  CONTENT_CREATION
  DESIGN_ASSISTANCE
  ANALYSIS
}

enum AISessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ARVRType {
  AR_OBJECT
  VR_SCENE
  AR_FILTER
  VR_EXPERIENCE
  AR_ANIMATION
  VR_GAME
}

enum ARVRStatus {
  DRAFT
  PROCESSING
  READY
  PUBLISHED
  ERROR
}

enum DNSRecordType {
  A
  AAAA
  CNAME
  MX
  TXT
  NS
}

// Blockchain & Web3 Models
model BlockchainWallet {
  id        String  @id @default(cuid())
  userId    String?
  websiteId String?

  // Wallet details
  address    String            @unique
  network    BlockchainNetwork
  walletType WalletType

  // Wallet metadata
  name        String?
  description String?

  // Security
  isEncrypted   Boolean @default(true)
  encryptionKey String? // Encrypted private key

  // Status
  status  WalletStatus @default(ACTIVE)
  balance Decimal      @default(0) // Current balance

  // Transaction tracking
  lastSyncAt       DateTime?
  transactionCount Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User?                   @relation(fields: [userId], references: [id], onDelete: SetNull)
  website      Website?                @relation(fields: [websiteId], references: [id], onDelete: SetNull)
  transactions BlockchainTransaction[]

  @@map("blockchain_wallets")
}

model NFTCollection {
  id        String  @id @default(cuid())
  userId    String?
  websiteId String?

  // Collection details
  name        String
  description String?
  symbol      String?

  // Contract details
  contractAddress String
  network         BlockchainNetwork
  standard        NFTStandard

  // Collection metadata
  imageUrl   String?
  bannerUrl  String?
  websiteUrl String?

  // Collection stats
  totalSupply  Int     @default(0)
  mintedCount  Int     @default(0)
  floorPrice   Decimal @default(0)
  volumeTraded Decimal @default(0)

  // Royalties
  royaltyPercentage Decimal @default(0)
  royaltyRecipient  String?

  // Status
  status     CollectionStatus @default(DRAFT)
  isVerified Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  website Website? @relation(fields: [websiteId], references: [id], onDelete: SetNull)
  nfts    NFT[]

  @@map("nft_collections")
}

model NFT {
  id           String @id @default(cuid())
  collectionId String

  // NFT details
  tokenId     String
  name        String
  description String?

  // Metadata
  imageUrl     String?
  animationUrl String?
  attributes   Json? // NFT attributes/traits

  // Ownership
  ownerAddress String?
  isListed     Boolean @default(false)
  listingPrice Decimal @default(0)

  // Transaction history
  mintPrice     Decimal @default(0)
  lastSalePrice Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  collection NFTCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, tokenId])
  @@map("nfts")
}

model SmartContract {
  id        String  @id @default(cuid())
  userId    String?
  websiteId String?

  // Contract details
  name        String
  description String?

  // Contract information
  contractAddress String
  network         BlockchainNetwork
  abi             Json // Contract ABI

  // Contract metadata
  sourceCode          String?
  compilerVersion     String?
  optimizationEnabled Boolean @default(false)

  // Deployment
  deploymentTxHash      String?
  deploymentBlockNumber Int?
  gasUsed               Int?

  // Status
  status     ContractStatus @default(DRAFT)
  isVerified Boolean        @default(false)

  // Usage tracking
  interactionCount  Int       @default(0)
  lastInteractionAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User?                      @relation(fields: [userId], references: [id], onDelete: SetNull)
  website      Website?                   @relation(fields: [websiteId], references: [id], onDelete: SetNull)
  interactions SmartContractInteraction[]

  @@map("smart_contracts")
}

model SmartContractInteraction {
  id         String @id @default(cuid())
  contractId String

  // Interaction details
  method     String
  parameters Json?

  // Transaction details
  txHash      String
  blockNumber Int
  gasUsed     Int?
  gasPrice    Decimal?

  // Result
  success      Boolean
  returnValue  Json?
  errorMessage String?

  // User context
  userAddress String?

  createdAt DateTime @default(now())

  // Relations
  contract SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("smart_contract_interactions")
}

model Web3Integration {
  id        String  @id @default(cuid())
  userId    String?
  websiteId String?

  // Integration details
  name        String
  description String?

  // Integration type
  type Web3IntegrationType

  // Configuration
  config Json // Integration-specific configuration

  // API keys and credentials
  apiKeys Json? // Encrypted API keys

  // Status
  status    IntegrationStatus @default(ACTIVE)
  isEnabled Boolean           @default(true)

  // Usage tracking
  lastUsedAt DateTime?
  usageCount Int       @default(0)

  // Error tracking
  lastError  String?
  errorCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  website Website? @relation(fields: [websiteId], references: [id], onDelete: SetNull)

  @@map("web3_integrations")
}

model BlockchainTransaction {
  id       String @id @default(cuid())
  walletId String

  // Transaction details
  txHash      String  @unique
  blockNumber Int
  blockHash   String?

  // Transaction data
  fromAddress String
  toAddress   String
  value       Decimal
  gasUsed     Int?
  gasPrice    Decimal?

  // Transaction metadata
  type          TransactionType
  status        TransactionStatus
  confirmations Int               @default(0)

  // Additional data
  data  String? // Transaction data/input
  nonce Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  wallet BlockchainWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("blockchain_transactions")
}

// Blockchain Enums
enum BlockchainNetwork {
  ETHEREUM
  POLYGON
  BINANCE_SMART_CHAIN
  ARBITRUM
  OPTIMISM
  AVALANCHE
  SOLANA
  POLKADOT
}

enum WalletType {
  EXTERNAL
  GENERATED
  IMPORTED
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum NFTStandard {
  ERC721
  ERC1155
  ERC4907
  SPL_TOKEN
}

enum CollectionStatus {
  DRAFT
  DEPLOYED
  MINTING
  COMPLETED
  PAUSED
}

enum ContractStatus {
  DRAFT
  DEPLOYED
  VERIFIED
  FAILED
}

enum Web3IntegrationType {
  MARKETPLACE
  PAYMENT_PROCESSOR
  ANALYTICS
  STORAGE
  IDENTITY
  DEFI
}

enum TransactionType {
  TRANSFER
  CONTRACT_CALL
  CONTRACT_DEPLOYMENT
  NFT_MINT
  NFT_TRANSFER
  SWAP
  STAKE
  UNSTAKE
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}
