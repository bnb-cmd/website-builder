// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "sqlite"
  url        = env("DATABASE_URL")
}

// User Management
model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String
  password String
  phone    String?
  avatar   String?
  role     String @default("USER") // USER, ADMIN, SUPER_ADMIN
  status   String @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED, PENDING

  // Business Information
  businessType String? // RESTAURANT, RETAIL, SERVICE, etc.
  city         String?
  companyName  String?

  // Localisation & AI usage
  preferredLanguage String? @default("ENGLISH") // ENGLISH, URDU, PUNJABI, etc.
  aiQuotaUsed       Int     @default(0)
  aiQuotaResetAt    DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  websites Website[]
  payments Payment[]
  orders   Order[]
  aiGenerations AIGeneration[]

  @@map("users")
}

// Website Management
model Website {
  id          String @id @default(cuid())
  name        String
  description String?
  status      String @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED

  // Content (using String instead of Json for SQLite)
  content   String? // Main website content
  settings  String? // Website settings
  customCSS String? // Custom CSS
  customJS  String? // Custom JavaScript

  // Domain
  subdomain    String? @unique
  customDomain String? @unique

  // Business
  businessType String? // RESTAURANT, RETAIL, SERVICE, etc.
  language     String  @default("ENGLISH") // ENGLISH, URDU, PUNJABI, etc.

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String? // Comma-separated keywords

  // Ownership
  userId String?
  user   User? @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  pages    Page[]
  products Product[]
  orders   Order[]

  @@map("websites")
}

model Page {
  id        String @id @default(cuid())
  websiteId String
  name      String
  slug      String
  content   String
  settings  String? // JSON as string
  isHome    Boolean @default(false)
  order     Int     @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String? // Comma-separated keywords

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, slug])
  @@map("pages")
}

// Template Management
model Template {
  id           String @id @default(cuid())
  name         String
  description  String?
  category     String // BUSINESS, PORTFOLIO, ECOMMERCE, etc.
  businessType String? // RESTAURANT, RETAIL, SERVICE, etc.
  language     String  @default("ENGLISH") // ENGLISH, URDU, PUNJABI, etc.

  // Template Data (using String instead of Json for SQLite)
  content String // Template structure
  styles  String // Template styles
  assets  String // Comma-separated asset URLs

  // Preview
  previewImage String?
  thumbnail    String?

  // Pricing
  isPremium Boolean  @default(false)
  price     Decimal?

  // Status
  status String @default("ACTIVE") // ACTIVE, INACTIVE, DRAFT

  // Metadata
  tags       String? // Comma-separated tags
  features   String? // Comma-separated features
  responsive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("templates")
}

// E-commerce
model Product {
  id           String  @id @default(cuid())
  websiteId    String
  name         String
  description  String?
  price        Decimal
  comparePrice Decimal?
  sku          String?

  // Inventory
  trackInventory    Boolean @default(false)
  inventory         Int     @default(0)
  lowStockThreshold Int     @default(5)
  allowBackorder    Boolean @default(false)

  // Media (comma-separated URLs)
  images String?
  videos String?

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String? // Comma-separated keywords

  // Status
  status String @default("ACTIVE") // ACTIVE, INACTIVE, OUT_OF_STOCK

  // Variants (JSON as string)
  hasVariants Boolean @default(false)
  variants    String?

  // Shipping
  weight     Decimal?
  dimensions String? // JSON as string

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website    Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          String @id @default(cuid())
  websiteId   String
  orderNumber String @unique

  // Customer Information
  customerId   String? // Link to User if registered
  customerEmail String
  customerName  String?
  customerPhone String?

  // Address (JSON as string)
  shippingAddress String
  billingAddress  String?

  // Order Details
  subtotal Decimal
  tax      Decimal @default(0)
  shipping Decimal @default(0)
  discount Decimal @default(0)
  total    Decimal

  // Payment
  paymentStatus String @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED, CANCELLED
  paymentMethod String?
  paymentId     String?

  // Shipping
  shippingStatus String @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  trackingNumber String?

  // Notes
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website  Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  customer User?       @relation(fields: [customerId], references: [id])
  items    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String

  quantity Int
  price    Decimal

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// AI Services
model AIGeneration {
  id        String @id @default(cuid())
  userId    String?

  // Generation Details
  type     String // CONTENT, IMAGE, SEO, COLORS, etc.
  prompt   String
  response String
  model    String

  // Metadata
  tokens   Int?
  cost     Decimal?
  language String? // ENGLISH, URDU, PUNJABI, etc.

  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("ai_generations")
}

// Subscription Management
model Subscription {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String  @unique
  tier        String  @default("FREE") // FREE, PRO, AGENCY

  // Pricing
  price    Decimal
  currency String @default("PKR")
  interval String // MONTHLY, YEARLY, LIFETIME

  // Features
  maxWebsites     Int
  maxPages        Int?
  maxProducts     Int?
  maxStorage      Int? // in MB
  customDomain    Boolean @default(false)
  aiGenerations   Int?
  prioritySupport Boolean @default(false)

  // Status
  status String @default("ACTIVE") // ACTIVE, INACTIVE, CANCELLED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Payment Payment[]

  @@map("subscriptions")
}

model Payment {
  id             String @id @default(cuid())
  userId         String?
  subscriptionId String?
  websiteId      String?
  purpose        String @default("PLATFORM_SUBSCRIPTION") // PLATFORM_SUBSCRIPTION, WEBSITE_CHECKOUT, ADDON_PURCHASE

  // Payment Details
  amount   Decimal
  currency String @default("PKR")
  status   String @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED, CANCELLED

  // Gateway Information
  gateway     String // STRIPE, JAZZCASH, EASYPAISA, BANK_TRANSFER
  gatewayId   String?
  gatewayData String? // JSON as string

  // Subscription
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("payments")
}