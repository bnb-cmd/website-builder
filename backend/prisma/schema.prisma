// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Comprehensive enum definitions for all features

// AI & Advanced Features
enum AISessionType {
  CHAT
  CODE_GENERATION
  CONTENT_CREATION
  DESIGN_ASSISTANCE
  ANALYSIS
  TRANSLATION
  OPTIMIZATION
}

enum AISessionStatus {
  ACTIVE
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum ARVRType {
  AR_EXPERIENCE
  VR_TOUR
  INTERACTIVE_3D
  PRODUCT_VISUALIZATION
  VIRTUAL_SHOWROOM
}

enum ARVRStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PROCESSING
}

// Agency Management
enum AgencyPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum AgencyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  ONBOARDING
  COMPLETED
}

// Notifications
enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  SYSTEM
  MARKETING
  REMINDER
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WHATSAPP
  TELEGRAM
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
  CLICKED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

// Content Management
enum ContentType {
  BLOG_POST
  PAGE_CONTENT
  PRODUCT_DESCRIPTION
  NEWS_ARTICLE
  TUTORIAL
  FAQ
  LANDING_PAGE
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
  REVIEW
}

enum ScheduleStatus {
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
  PROCESSING
}

// Media & Assets
enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  GIF
  SVG
  PDF
  DOCUMENT
}

enum AssetStatus {
  ACTIVE
  ARCHIVED
  DELETED
  PROCESSING
  FAILED
}

enum ProjectStatus {
  DRAFT
  PROCESSING
  COMPLETED
  FAILED
  REVIEW
}

// Marketing & Campaigns
enum CampaignType {
  EMAIL
  SMS
  SOCIAL
  PUSH
  RETARGETING
  AB_TEST
}

enum CampaignChannel {
  EMAIL
  SMS
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  PUSH_NOTIFICATION
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum MessageType {
  EMAIL
  SMS
  SOCIAL_POST
  PUSH_NOTIFICATION
  IN_APP
}

enum MessageStatus {
  DRAFT
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

// Integrations
enum IntegrationCategory {
  ANALYTICS
  MARKETING
  PAYMENT
  SOCIAL
  CRM
  EMAIL
  CUSTOMER_SUPPORT
  PRODUCTIVITY
  ECOMMERCE
  OTHER
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  BETA
  MAINTENANCE
}

enum AuthType {
  API_KEY
  OAUTH2
  BASIC_AUTH
  NO_AUTH
  CUSTOM
}

// Blockchain & Web3
enum BlockchainNetwork {
  ETHEREUM
  POLYGON
  BSC
  ARBITRUM
  OPTIMISM
  AVALANCHE
  SOLANA
}

enum WalletType {
  METAMASK
  WALLETCONNECT
  COINBASE
  TRUST_WALLET
  PHANTOM
  CUSTOM
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  COMPROMISED
}

enum NFTStandard {
  ERC721
  ERC1155
  SPL
  CUSTOM
}

enum CollectionStatus {
  DRAFT
  DEPLOYED
  ACTIVE
  PAUSED
  COMPLETED
}

enum ContractStatus {
  DRAFT
  DEPLOYED
  ACTIVE
  PAUSED
  UPGRADED
}

enum Web3IntegrationType {
  NFT_GALLERY
  CRYPTO_PAYMENTS
  DAO_VOTING
  TOKEN_GATING
  METAVERSE_INTEGRATION
  DEFI_INTEGRATION
}

enum TransactionType {
  SEND
  RECEIVE
  CONTRACT_INTERACTION
  NFT_MINT
  NFT_TRANSFER
  STAKING
  UNSTAKING
  SWAP
}

// Design Systems
enum DesignSystemStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  VERSION_CONTROL
}

// Analytics
enum AnalyticsPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

// Product & E-commerce
enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PARTIAL
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentGateway {
  STRIPE
  JAZZCASH
  EASYPAISA
  BANK_TRANSFER
  PAYPAL
  SQUARE
}

enum PaymentPurpose {
  PLATFORM_SUBSCRIPTION
  WEBSITE_CHECKOUT
  ADDON_PURCHASE
  UPGRADE
  RENEWAL
}

// Subscription Management
enum SubscriptionTier {
  FREE
  PRO
  AGENCY
  ENTERPRISE
}

enum SubscriptionInterval {
  MONTHLY
  YEARLY
  LIFETIME
}

// AI Generation Types
enum AIGenerationType {
  CONTENT
  IMAGE
  SEO
  COLORS
  DESIGN
  COPYWRITING
  TRANSLATION
  CODE
}

// Language Support
enum Language {
  ENGLISH
  URDU
  PUNJABI
  SINDHI
  BALOCHI
  PASHTO
  ARABIC
  FRENCH
  SPANISH
  GERMAN
  CHINESE
  HINDI
  PORTUGUESE
  RUSSIAN
  JAPANESE
  KOREAN
}

// User Management Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  AGENCY
  AGENCY_CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum BusinessType {
  RESTAURANT
  RETAIL
  SERVICE
  HEALTHCARE
  EDUCATION
  TECHNOLOGY
  FINANCE
  REAL_ESTATE
  ENTERTAINMENT
  NON_PROFIT
  OTHER
}

// Website Management Enums
enum WebsiteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  MAINTENANCE
}

// User Management
model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String
  password String
  phone    String?
  avatar   String?
  role     UserRole @default(USER)
  status   UserStatus @default(ACTIVE)

  // Business Information
  businessType BusinessType?
  city         String?
  companyName  String?

  // Localisation & AI usage
  preferredLanguage Language @default(ENGLISH)
  aiQuotaUsed       Int     @default(0)
  aiQuotaResetAt    DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  websites Website[]
  payments Payment[]
  orders   Order[]
  aiGenerations AIGeneration[]
  aiSessions AISession[]
  arvrContent ARVRContent[]
  blockchainWallets BlockchainWallet[]
  smartContractInteractions SmartContractInteraction[]
  content Content[]
  aiOnboardingProfile AiOnboardingProfile?
  notifications Notification[]
  notificationPreferences NotificationPreferences?
  notificationDigests NotificationDigest[]
  agencyClient AgencyClient?
  mediaAssets MediaAsset[]
  videoProjects VideoProject[]
  sessions UserSession[]

  @@map("users")
}

// Website Management
model Website {
  id          String @id @default(cuid())
  name        String
  description String?
  status      WebsiteStatus @default(DRAFT)

  // Content (using String instead of Json for SQLite)
  content   String? // Main website content
  settings  String? // Website settings
  customCSS String? // Custom CSS
  customJS  String? // Custom JavaScript

  // Domain
  subdomain    String? @unique
  customDomain String? @unique

  // Business
  businessType BusinessType?
  language     Language @default(ENGLISH)
  templateId   String? // Template used to create this website

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String? // Comma-separated keywords

  // Ownership
  userId String?
  user   User? @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  pages    Page[]
  products Product[]
  orders   Order[]
  ecommerceSettings WebsiteEcommerceSettings?
  aiSessions AISession[]
  arvrContent ARVRContent[]
  analytics WebsiteAnalytics[]
  blockchainWallets BlockchainWallet[]
  smartContracts SmartContract[]
  web3Integrations Web3Integration[]
  blockchainTransactions BlockchainTransaction[]
  contentItems Content[]
  contentCategories ContentCategory[]
  contentTemplates ContentTemplate[]
  designSystems DesignSystem[]
  marketingCampaigns MarketingCampaign[]
  aiOnboardingProfile AiOnboardingProfile?
  notifications Notification[]
  websiteIntegrations WebsiteIntegration[]
  mediaAssets MediaAsset[]
  videoProjects VideoProject[]
  pwaSettings PwaSettings?
  socialAccounts SocialAccount[]
  socialCampaigns SocialCampaign[]
  socialAutomationRules SocialAutomationRule[]
  domains Domain[]
  visitors WebsiteVisitor[]
  nftCollections NFTCollection[]

  @@map("websites")
}

model Page {
  id        String @id @default(cuid())
  websiteId String
  name      String
  slug      String
  content   String
  settings  String? // JSON as string
  isHome    Boolean @default(false)
  order     Int     @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String? // Comma-separated keywords

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, slug])
  @@map("pages")
}

// Template Management
model Template {
  id           String @id @default(cuid())
  name         String
  description  String?
  category     String // BUSINESS, PORTFOLIO, ECOMMERCE, etc.
  businessType BusinessType?
  language     Language @default(ENGLISH)

  // Template Data (using String instead of Json for SQLite)
  content String // Template structure
  styles  String // Template styles
  assets  String // Comma-separated asset URLs

  // Preview
  previewImage String?
  thumbnail    String?
  heroImageUrl String?
  demoImages   String? // Comma-separated demo image URLs

  // Localization
  isGlobal         Boolean @default(true)
  parentTemplateId String? // Link to parent template for localized versions
  localizedFor     String? // Country code (pk, us, etc.)

  // Pricing
  isPremium Boolean  @default(false)
  price     Decimal?

  // Status
  status String @default("ACTIVE") // ACTIVE, INACTIVE, DRAFT

  // Metadata
  tags       String? // Comma-separated tags
  features   String? // Comma-separated features
  responsive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("templates")
}

// Image Library for Stock Photos
model ImageLibrary {
  id          String   @id @default(cuid())
  name        String
  category    String   // hero, business, food, tech, etc.
  tags        String   // Comma-separated searchable tags
  url         String
  thumbnail   String
  width       Int
  height      Int
  source      String   // unsplash, pexels, pixabay, custom
  license     String   // free, commercial, attribution-required
  isPremium   Boolean  @default(false)
  downloadCount Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("image_library")
}

// E-commerce
model Product {
  id           String  @id @default(cuid())
  websiteId    String
  name         String
  description  String?
  price        Decimal
  comparePrice Decimal?
  sku          String?

  // Inventory
  trackInventory    Boolean @default(false)
  inventory         Int     @default(0)
  lowStockThreshold Int     @default(5)
  allowBackorder    Boolean @default(false)

  // Media (comma-separated URLs)
  images String?
  videos String?

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String? // Comma-separated keywords

  // Status
  status ProductStatus @default(ACTIVE)

  // Variants (JSON as string)
  hasVariants Boolean @default(false)
  variants    String?

  // Shipping
  weight     Decimal?
  dimensions String? // JSON as string

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website    Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          String @id @default(cuid())
  websiteId   String
  orderNumber String @unique

  // Customer Information
  customerId   String? // Link to User if registered
  customerEmail String
  customerName  String?
  customerPhone String?

  // Address (JSON as string)
  shippingAddress String
  billingAddress  String?

  // Order Details
  subtotal Decimal
  tax      Decimal @default(0)
  shipping Decimal @default(0)
  discount Decimal @default(0)
  total    Decimal

  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?

  // Shipping
  shippingStatus ShippingStatus @default(PENDING)
  trackingNumber String?

  // Notes
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  website  Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  customer User?       @relation(fields: [customerId], references: [id])
  items    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String

  quantity Int
  price    Decimal

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// AI Services
model AIGeneration {
  id        String @id @default(cuid())
  userId    String?
  websiteId String?

  // Generation Details
  type     AIGenerationType
  prompt   String
  response String
  model    String
  temperature Decimal?
  maxTokens Int?

  // Metadata
  tokens   Int?
  cost     Decimal?
  language Language @default(ENGLISH)
  status   String @default("COMPLETED") // COMPLETED, FAILED, PROCESSING
  
  // Additional Data
  metadata String? // JSON additional data
  errorMessage String?
  processingTime Int? // milliseconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("ai_generations")
}

// Subscription Management
model Subscription {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String  @unique
  tier        SubscriptionTier @default(FREE)

  // Pricing
  price    Decimal
  currency String @default("PKR")
  interval SubscriptionInterval

  // Features
  maxWebsites     Int
  maxPages        Int?
  maxProducts     Int?
  maxStorage      Int? // in MB
  customDomain    Boolean @default(false)
  aiGenerations   Int?
  prioritySupport Boolean @default(false)
  whiteLabel      Boolean @default(false)
  apiAccess       Boolean @default(false)
  analytics       Boolean @default(true)
  seoTools        Boolean @default(false)
  ecommerce       Boolean @default(false)
  marketing       Boolean @default(false)
  integrations    Int @default(5)

  // Status
  status String @default("ACTIVE") // ACTIVE, INACTIVE, CANCELLED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Payment Payment[]

  @@map("subscriptions")
}

model Payment {
  id             String @id @default(cuid())
  userId         String?
  subscriptionId String?
  websiteId      String?
  purpose        PaymentPurpose @default(PLATFORM_SUBSCRIPTION)

  // Payment Details
  amount   Decimal
  currency String @default("PKR")
  status   PaymentStatus @default(PENDING)

  // Gateway Information
  gateway     PaymentGateway
  gatewayId   String?
  gatewayData String? // JSON as string
  gatewayFee  Decimal @default(0)
  
  // Additional Details
  description String?
  metadata    String? // JSON additional data
  refundedAt  DateTime?
  refundAmount Decimal?
  refundReason String?

  // Subscription
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("payments")
}

// E-commerce Settings per Website
model WebsiteEcommerceSettings {
  id        String @id @default(cuid())
  websiteId String @unique
  
  // Store settings
  storeName         String?
  storeDescription  String?
  currency          String @default("PKR")
  taxRate           Decimal @default(0)
  shippingEnabled   Boolean @default(true)
  
  // Payment gateways
  stripeEnabled     Boolean @default(false)
  stripePublicKey   String?
  stripeSecretKey   String?
  jazzcashEnabled   Boolean @default(false)
  jazzcashMerchantId String?
  jazzcashSecretKey String?
  easypaisaEnabled  Boolean @default(false)
  easypaisaMerchantId String?
  easypaisaSecretKey String?
  
  // Shipping
  freeShippingThreshold Decimal?
  flatShippingRate      Decimal?
  localDeliveryEnabled  Boolean @default(false)
  
  // Inventory
  lowStockAlert     Boolean @default(true)
  lowStockThreshold Int @default(10)
  
  // Cart & Checkout
  guestCheckoutEnabled Boolean @default(true)
  cartAbandonmentEmail Boolean @default(false)
  
  // Email settings
  orderConfirmationEmail Boolean @default(true)
  shippingNotificationEmail Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("website_ecommerce_settings")
}

// AI Services
model AISession {
  id        String @id @default(cuid())
  websiteId String
  userId    String?
  sessionId String? @unique
  type      AISessionType
  context   String? // JSON context data
  model     String?
  temperature Decimal?
  maxTokens Int?
  status    AISessionStatus @default(ACTIVE)
  history   String? // JSON conversation history
  messageCount Int @default(0)
  tokenUsage   Int @default(0)
  cost         Decimal @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  
  @@map("ai_sessions")
}

model ARVRContent {
  id        String @id @default(cuid())
  websiteId String
  userId    String?
  name      String?
  type      ARVRType
  description String?
  content   String // JSON content data
  assets    String? // Asset URLs
  modelUrl  String?
  textureUrl String?
  animationUrl String?
  scale     String? // JSON scale data
  position  String? // JSON position data
  rotation  String? // JSON rotation data
  interactions String? // JSON interactions
  polygonCount Int?
  status    ARVRStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  
  @@map("arvr_content")
}

// Analytics
model WebsiteAnalytics {
  id        String @id @default(cuid())
  websiteId String
  date      DateTime
  period    String // DAILY, WEEKLY, MONTHLY, YEARLY
  visitors  Int @default(0)
  pageViews Int @default(0)
  bounceRate Decimal?
  avgSessionDuration Decimal?
  conversionRate Decimal?
  revenue   Decimal?
  metadata  String? // JSON additional metrics
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@unique([websiteId, date, period])
  @@map("website_analytics")
}

// Blockchain & Web3
model BlockchainWallet {
  id        String @id @default(cuid())
  userId    String?
  websiteId String?
  address   String @unique
  type      String // METAMASK, WALLETCONNECT, COINBASE, etc.
  network   String // ETHEREUM, POLYGON, BSC, etc.
  status    String @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  metadata  String? // JSON wallet metadata
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User?    @relation(fields: [userId], references: [id])
  website Website? @relation(fields: [websiteId], references: [id])
  transactions BlockchainTransaction[]
  
  @@map("blockchain_wallets")
}

model NFTCollection {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  symbol      String?
  standard    String // ERC721, ERC1155, etc.
  contractAddress String?
  status      String @default("DRAFT") // DRAFT, DEPLOYED, ACTIVE, PAUSED
  metadata    String? // JSON collection metadata
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  nfts    NFT[]
  
  @@map("nft_collections")
}

model NFT {
  id             String @id @default(cuid())
  collectionId   String
  tokenId        String
  name           String
  description    String?
  imageUrl       String?
  metadata       String? // JSON NFT metadata
  ownerAddress   String?
  status         String @default("MINTED") // MINTED, TRANSFERRED, BURNED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  collection NFTCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, tokenId])
  @@map("nfts")
}

model SmartContract {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  address     String?
  abi         String? // JSON ABI
  bytecode    String?
  status      String @default("DRAFT") // DRAFT, DEPLOYED, ACTIVE, PAUSED
  network     String // ETHEREUM, POLYGON, BSC, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  interactions SmartContractInteraction[]
  
  @@map("smart_contracts")
}

model SmartContractInteraction {
  id          String @id @default(cuid())
  contractId  String
  userId      String?
  method      String
  parameters  String? // JSON parameters
  txHash      String?
  status      String @default("PENDING") // PENDING, SUCCESS, FAILED
  gasUsed     Decimal?
  gasPrice    Decimal?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  contract SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  user    User?         @relation(fields: [userId], references: [id])
  
  @@map("smart_contract_interactions")
}

model Web3Integration {
  id          String @id @default(cuid())
  websiteId   String
  type        String // NFT_GALLERY, CRYPTO_PAYMENTS, DAO_VOTING, etc.
  config      String // JSON configuration
  status      String @default("ACTIVE") // ACTIVE, INACTIVE, PAUSED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("web3_integrations")
}

model BlockchainTransaction {
  id          String @id @default(cuid())
  walletId    String?
  websiteId   String?
  txHash      String @unique
  type        String // SEND, RECEIVE, CONTRACT_INTERACTION, NFT_MINT, etc.
  amount      Decimal?
  token       String?
  fromAddress String?
  toAddress   String?
  status      String @default("PENDING") // PENDING, CONFIRMED, FAILED
  blockNumber Int?
  gasUsed     Decimal?
  gasPrice    Decimal?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  wallet  BlockchainWallet? @relation(fields: [walletId], references: [id])
  website Website?          @relation(fields: [websiteId], references: [id])
  
  @@map("blockchain_transactions")
}

// Content Management
model Content {
  id          String @id @default(cuid())
  websiteId   String
  userId      String?
  title       String
  content     String
  type        ContentType
  status      ContentStatus @default(DRAFT)
  language    Language @default(ENGLISH)
  slug        String?
  seoTitle    String?
  seoDescription String?
  seoKeywords String?
  tags        String? // Comma-separated tags
  featuredImage String?
  author      String? // Author name
  publishedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  schedules ContentSchedule[]
  analytics ContentAnalytics[]
  
  @@map("content")
}

model ContentCategory {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  slug        String
  parentId    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@unique([websiteId, slug])
  @@map("content_categories")
}

model ContentSchedule {
  id          String @id @default(cuid())
  contentId   String
  scheduledAt DateTime
  status      ScheduleStatus @default(SCHEDULED)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@map("content_schedules")
}

model ContentTemplate {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  template    String // JSON template structure
  category    String?
  isDefault   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("content_templates")
}

model ContentAnalytics {
  id          String @id @default(cuid())
  contentId   String
  date        DateTime
  views       Int @default(0)
  uniqueViews Int @default(0)
  shares      Int @default(0)
  likes       Int @default(0)
  comments    Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, date])
  @@map("content_analytics")
}

// Design System
model DesignSystem {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  colors      String // JSON color palette
  typography  String // JSON typography settings
  spacing     String // JSON spacing system
  components  String // JSON component library
  icons       String? // JSON icon library
  animations  String? // JSON animation presets
  breakpoints String? // JSON responsive breakpoints
  status      DesignSystemStatus @default(DRAFT)
  version     String @default("1.0.0")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("design_systems")
}

// Marketing & Campaigns
model MarketingCampaign {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  channel     CampaignChannel
  targetAudience String? // JSON audience criteria
  budget      Decimal?
  startDate   DateTime?
  endDate     DateTime?
  goals       String? // JSON campaign goals
  metrics     String? // JSON metrics tracking
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  messages CampaignMessage[]
  
  @@map("marketing_campaigns")
}

model CampaignMessage {
  id          String @id @default(cuid())
  campaignId  String
  subject     String?
  content     String
  type        MessageType
  status      MessageStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  bouncedAt   DateTime?
  errorMessage String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@map("campaign_messages")
}

// AI Onboarding
model AiOnboardingProfile {
  id          String @id @default(cuid())
  userId      String @unique
  websiteId   String? @unique
  industry    String?
  businessGoals String? // JSON array of goals
  targetAudience String? // JSON audience description
  brandPersonality String? // JSON brand traits
  contentPreferences String? // JSON content preferences
  language    String @default("ENGLISH")
  completed   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  website Website? @relation(fields: [websiteId], references: [id])
  
  @@map("ai_onboarding_profiles")
}

// Notifications
model Notification {
  id          String @id @default(cuid())
  userId      String?
  websiteId   String?
  title       String
  message     String
  type        NotificationType
  channel     NotificationChannel
  status      NotificationStatus @default(PENDING)
  priority    NotificationPriority @default(NORMAL)
  actions     String? // JSON array of actions
  data        String? // JSON additional data
  imageUrl    String?
  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  clickedAt   DateTime?
  expiresAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User?    @relation(fields: [userId], references: [id])
  website Website? @relation(fields: [websiteId], references: [id])
  
  @@map("notifications")
}

model NotificationPreferences {
  id          String @id @default(cuid())
  userId      String @unique
  emailEnabled Boolean @default(true)
  smsEnabled  Boolean @default(false)
  pushEnabled Boolean @default(true)
  inAppEnabled Boolean @default(true)
  marketingEmails Boolean @default(false)
  frequency   String @default("IMMEDIATE") // IMMEDIATE, DAILY, WEEKLY
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

model NotificationDigest {
  id          String @id @default(cuid())
  userId      String
  type        String // DAILY, WEEKLY, MONTHLY
  content     String // JSON digest content
  sentAt      DateTime?
  status      String @default("PENDING") // PENDING, SENT, FAILED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_digests")
}

// Agency Management
model Agency {
  id          String @id @default(cuid())
  userId      String? // Agency owner
  name        String
  description String?
  website     String?
  email       String
  phone       String?
  address     String?
  logo        String?
  brandName   String?
  brandColors String? // JSON brand colors
  customDomain String?
  customLogo  String?
  features    String? // JSON feature flags
  status      AgencyStatus @default(ACTIVE)
  plan        AgencyPlan @default(STARTER)
  maxClients  Int @default(10)
  billingEmail String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  clients AgencyClient[]
  
  @@map("agencies")
}

model AgencyClient {
  id          String @id @default(cuid())
  agencyId    String
  userId      String @unique
  websiteId   String?
  status      ClientStatus @default(ACTIVE)
  permissions String? // JSON permissions
  companyName String?
  projectType String?
  budget      Decimal?
  timeline    String?
  notes       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("agency_clients")
}

// Integrations
model Integration {
  id          String @id @default(cuid())
  name        String
  description String?
  category    IntegrationCategory
  provider    String // GOOGLE, FACEBOOK, STRIPE, etc.
  authType    AuthType @default(API_KEY)
  config      String? // JSON configuration
  status      IntegrationStatus @default(ACTIVE)
  version     String @default("1.0.0")
  documentation String?
  iconUrl     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  websiteIntegrations WebsiteIntegration[]
  
  @@map("integrations")
}

model WebsiteIntegration {
  id             String @id @default(cuid())
  websiteId      String
  integrationId  String
  config         String? // JSON configuration
  status         IntegrationStatus @default(ACTIVE)
  lastSyncAt     DateTime?
  lastErrorAt   DateTime?
  errorMessage   String?
  syncFrequency  Int @default(3600) // seconds
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website     Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([websiteId, integrationId])
  @@map("website_integrations")
}

model IntegrationWebhook {
  id             String @id @default(cuid())
  integrationId  String
  url            String
  events         String // JSON array of events
  secret         String?
  status         String @default("ACTIVE") // ACTIVE, INACTIVE
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("integration_webhooks")
}

model IntegrationLog {
  id             String @id @default(cuid())
  integrationId  String
  websiteId      String?
  event          String
  data           String? // JSON event data
  status         String // SUCCESS, ERROR, WARNING
  errorMessage   String?
  
  createdAt DateTime @default(now())
  
  @@map("integration_logs")
}

// Media & Assets
model MediaAsset {
  id          String @id @default(cuid())
  websiteId   String
  userId      String?
  name        String
  type        MediaType
  url         String
  thumbnail   String?
  size        Int
  mimeType    String
  width       Int?
  height      Int?
  duration    Int? // for videos/audio
  metadata    String? // JSON metadata
  tags        String? // Comma-separated tags
  aiGenerated Boolean @default(false)
  aiPrompt    String?
  status      AssetStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  clips   VideoClip[]
  
  @@map("media_assets")
}

model VideoProject {
  id          String @id @default(cuid())
  websiteId   String
  userId      String?
  name        String
  description String?
  status      ProjectStatus @default(DRAFT)
  duration    Int? // in seconds
  resolution  String? // 1080p, 720p, etc.
  frameRate   Int?
  timeline    String? // JSON timeline data
  exportSettings String? // JSON export settings
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  clips   VideoClip[]
  
  @@map("video_projects")
}

model VideoClip {
  id          String @id @default(cuid())
  projectId   String
  assetId     String? // Link to MediaAsset
  name        String
  startTime   Int // in seconds
  endTime     Int // in seconds
  position    Int @default(0) // position in timeline
  effects     String? // JSON effects
  filters     String? // JSON filters
  transform   String? // JSON transform data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  asset   MediaAsset?  @relation(fields: [assetId], references: [id])
  
  @@map("video_clips")
}

// PWA Settings
model PwaSettings {
  id          String @id @default(cuid())
  websiteId   String @unique
  name        String?
  shortName   String?
  description String?
  themeColor  String?
  backgroundColor String?
  display     String @default("standalone") // standalone, fullscreen, minimal-ui
  orientation String @default("portrait") // portrait, landscape, any
  startUrl    String @default("/")
  scope       String @default("/")
  icons       String? // JSON array of icon objects
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("pwa_settings")
}

// Social Media Hub
model SocialAccount {
  id          String @id @default(cuid())
  websiteId   String
  platform    String // FACEBOOK, INSTAGRAM, TWITTER, LINKEDIN, etc.
  accountId   String
  accountName String
  accessToken String?
  refreshToken String?
  status      String @default("ACTIVE") // ACTIVE, INACTIVE, EXPIRED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  posts   SocialPost[]
  
  @@unique([websiteId, platform, accountId])
  @@map("social_accounts")
}

model SocialPost {
  id          String @id @default(cuid())
  accountId   String
  content     String
  mediaUrls   String? // JSON array of media URLs
  scheduledAt DateTime?
  publishedAt DateTime?
  status      String @default("DRAFT") // DRAFT, SCHEDULED, PUBLISHED, FAILED
  platformPostId String?
  engagement  String? // JSON engagement metrics
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  account SocialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("social_posts")
}

model SocialCampaign {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      String @default("DRAFT") // DRAFT, ACTIVE, PAUSED, COMPLETED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("social_campaigns")
}

model SocialAutomationRule {
  id          String @id @default(cuid())
  websiteId   String
  name        String
  trigger     String // NEW_POST, ENGAGEMENT_THRESHOLD, etc.
  action      String // AUTO_LIKE, AUTO_COMMENT, AUTO_SHARE, etc.
  config      String? // JSON configuration
  status      String @default("ACTIVE") // ACTIVE, INACTIVE
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("social_automation_rules")
}

// Domain Management
model Domain {
  id          String @id @default(cuid())
  websiteId   String
  domain      String @unique
  status      String @default("PENDING") // PENDING, ACTIVE, FAILED, EXPIRED
  verified    Boolean @default(false)
  sslEnabled  Boolean @default(false)
  dnsRecords String? // JSON DNS records
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  records DNSRecord[]
  
  @@map("domains")
}

model DNSRecord {
  id       String @id @default(cuid())
  domainId String
  type     String // A, AAAA, CNAME, MX, TXT, etc.
  name     String
  value    String
  ttl      Int @default(3600)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  
  @@map("dns_records")
}

// Website Visitors
model WebsiteVisitor {
  id          String @id @default(cuid())
  websiteId   String
  sessionId   String
  ipAddress   String?
  userAgent   String?
  country     String?
  city        String?
  referrer    String?
  landingPage String?
  exitPage    String?
  duration    Int? // in seconds
  pageViews   Int @default(1)
  
  createdAt DateTime @default(now())
  
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  
  @@map("website_visitors")
}

// User Sessions
model UserSession {
  id        String @id @default(cuid())
  userId    String
  token     String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}